
git config --global user.name "mildestinos"
git config --global user.email "adm.esv@gmail.com"

git config --global --list

😒Repositorio remoto
antes de fazer o commit



nothing added to commit but untracked files present (use "git add" to track)
(.venv) PS C:\Users\ead\Python Developer QUA.491.006\01_logica_de_programacao> git status // para verificar
👍#para ingnorar um arquivo criar um arquivo chamado .gitignore
pode criar arquivo  colocar nome na frente pornto na frente

👍git status
Fica verde esta pronto para subir os dados.

👍Fazer commit
Exemplos
git commit -m "Primeiro commit versão 1.0, aula do dia 09.06.2025."

Pegar o comite e enviar para a nuvem
Criar um diretório github

…or create a new repository on the command line
echo "# python_developer_qua.491.001" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/mildestinos/python_developer_qua.491.001.git
git push -u origin main

---

* `git init` — cria um repositório local
* `git clone [url]` — clona um repositório remoto
* `git status` — mostra o estado atual dos arquivos
* `git add [arquivo]` — adiciona arquivos para o próximo commit
* `git commit -m "mensagem"` — cria um commit com mensagem
* `git log` — mostra o histórico de commits
* `git diff` — mostra diferenças não commitadas
* `git branch` — lista ou cria branches
* `git checkout [branch]` — troca de branch
* `git checkout -b [branch]` — cria e muda para uma branch nova
* `git merge [branch]` — une uma branch à atual
* `git pull` — puxa atualizações do remoto e faz merge
* `git push` — envia commits para o remoto
* `git remote -v` — lista repositórios remotos
* `git reset [arquivo]` — remove arquivo do staging
* `git rm [arquivo]` — remove arquivo do repositório
* `git stash` — salva mudanças temporariamente
* `git stash apply` — recupera mudanças salvas no stash
* `git tag [nome]` — cria uma tag
* `git fetch` — baixa atualizações sem merge
* `git show [commit/tag]` — mostra detalhes de commit ou tag
* `git config` — configura opções do Git


➡️ 10/06. estruturas de descisão

Em Python, a estrutura de decisão (ou condicional) é 
usada para executar diferentes blocos de código com base em condições. A principal estrutura de decisão é o if, com as variações elif e else.

Computador: entrada ➡️ processamento ➡️ saída

Identar python
Dicas
🧰 Ferramentas para aplicar a PEP 8:
flake8 – Linter para verificar se o código segue a PEP 8.

black – Formatador automático de código (segue o espírito da PEP 8).

pylint – Linter mais completo, verifica estilo e erros.

13/06........
dever de casas

